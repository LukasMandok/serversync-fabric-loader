import org.apache.tools.ant.filters.StripLineComments
import org.apache.tools.ant.types.Parameter

buildscript {
	repositories {
		mavenCentral()
	}

	dependencies {
		classpath 'net.minecraftforge.gradle:ForgeGradle:6.+'
	}
}

plugins {
    id 'fabric-loom' version '1.2-SNAPSHOT'
    id 'eclipse'
    id 'maven-publish'
    //id 'net.minecraftforge.gradle' version '6.+'
}

version_fabric = project.mod_version
group_fabric = project.maven_group
base.archivesName_fabric = project.archives_base_name

version_forge = '3.0.0'
group_forge = 'serversync.forge.loader'
archivesName_forge = 'serversync_forge_loader'


// Forge configuration

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"

	// Forge
	classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '6.+', changing: true

	// Fabric
	// To change the versions see the gradle.properties file
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// Uncomment the following line to enable the deprecated Fabric API modules. 
	// These are included in the Fabric API production distribution and allow you to update your mod to the latest modules at a later more convenient time.

	// modImplementation "net.fabricmc.fabric-api:fabric-api-deprecated:${project.fabric_version}"
}


tasks.processResources {
	inputs.property("version", project.version)

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	// withSourcesJar()

	toolchain.languageVersion = JavaLanguageVersion.of(17)

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

minecraft {
	mappings channel: 'official', version: '1.19.4'

	runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                serversyncforgeloader {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                serversyncforgeloader {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'serversync_forge_loader', '--all', '--output', file('src/generated/resources/')

            mods {
                serversyncforgeloader {
                    source sourceSets.main
                }
            }
        }
	}
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}


tasks.jar {
	manifest {
        attributes([
                "Specification-Title"     : "serversyncforgeloader",
                "Specification-Vendor"    : "serversyncforgeloader",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "serversyncforgeloader",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

	finalizedBy('reobfJar')

	from("LICENSE") {
		rename { "${it}_${base.archivesName_fabric.get()}"}
	}
}

task generate {
    description "Build files that the project depends on."
    group "build setup"

    def dir = 'src/main/java/serversync/generated/'
    def filePath = 'src/main/java/serversync/generated/Reference.java'
    file(dir).mkdirs()
    file(filePath).createNewFile()

    def writer = file(filePath).newWriter()
    def c = [
            'package serversync.generated;',
            '',
            'public class Reference {',
            '    public static final String VERSION = "<<";'.replaceFirst('<<', version.toString()),
            '    public static final String MODID = "<<";'.replaceFirst('<<', archivesBaseName),
            '}'
    ]
    for (String line : c) {
        writer.append(line)
        writer.newLine()
    }
    writer.close()
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}

build {
    dependsOn generate
}

compileJava {
    dependsOn generate
}

processResources {
    filesMatching('**/mods.toml') {
        expand(version: version_forge)
        def param = new Parameter()
        param.type = 'comment'
        param.value = '#'
        filter(StripLineComments, parameters: [param])
        filter { String line ->
            line.replaceAll('\\s*#.*', '')
        }
    }
}