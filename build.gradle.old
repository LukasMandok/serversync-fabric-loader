import org.apache.tools.ant.filters.StripLineComments
import org.apache.tools.ant.types.Parameter

buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '6.+', changing: true
    }
}

plugins {
    id 'eclipse'
    id 'fabric-loom' version '1.2-SNAPSHOT'
    id 'maven-publish'
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.

version = project.mod_version
group = project.maven_group
//group = 'serversync.forge.loader' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'serversync_forge_loader'

base {
	archivesName = project.archives_base_name
}


//sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '17' // Need this here so eclipse task generates correctly.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'official', version: '1.19.4'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                serversyncforgeloader {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                serversyncforgeloader {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'serversync_forge_loader', '--all', '--output', file('src/generated/resources/')

            mods {
                serversyncforgeloader {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.19.4-45.0.66'

    // You may put jars on which you depend on in ./libs or you may define them like so..
    // compile "some.group:artifact:version:classifier"
    // compile "some.group:artifact:version"

    // Real examples
    // compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    // compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    // provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // These dependencies get remapped to your current MCP mappings
    // deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

    //fabric dependencies:
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
    //withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title"     : "serversyncforgeloader",
                "Specification-Vendor"    : "serversyncforgeloader",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "serversyncforgeloader",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// we define a custom artifact that is sourced from the reobfJar output task
// and then declare that to be published
// Note you'll need to add a repository here
// def reobfFile = file("$buildDir/reobfJar/output.jar")
// def reobfArtifact = artifacts.add('default', reobfFile) {
//     type 'jar'
//     builtBy 'reobfJar'
// }
jar.finalizedBy('reobfJar')

publishing {
    publications {
        // gpr(MavenPublication) {
        //     from components.java
        // }
		mavenJava(MavenPublication) {
            artifact jar
            from components.java
        }
    }
    repositories {
        maven {
            name = 'GitHubPackages'
            url = uri 'https://maven.pkg.github.com/rheimus/serversync-forge-loader'
            credentials {
                username = project.findProperty('gpr.user') ?: System.getenv('GPR_USERNAME')
                password = project.findProperty('gpr.key') ?: System.getenv('GPR_TOKEN')
            }
        }
    }
}

task generate {
    description "Build files that the project depends on."
    group "build setup"

    def dir = 'src/main/java/serversync/generated/'
    def filePath = 'src/main/java/serversync/generated/Reference.java'
    file(dir).mkdirs()
    file(filePath).createNewFile()

    def writer = file(filePath).newWriter()
    def c = [
            'package serversync.generated;',
            '',
            'public class Reference {',
            '    public static final String VERSION = "<<";'.replaceFirst('<<', version.toString()),
            '    public static final String MODID = "<<";'.replaceFirst('<<', archivesBaseName),
            '}'
    ]
    for (String line : c) {
        writer.append(line)
        writer.newLine()
    }
    writer.close()
}

build {
    dependsOn generate
}

compileJava {
    dependsOn generate
}

processResources {
    // forge
    filesMatching('**/mods.toml') {
        expand(version: version)
        def param = new Parameter()
        param.type = 'comment'
        param.value = '#'
        filter(StripLineComments, parameters: [param])
        filter { String line ->
            line.replaceAll('\\s*#.*', '')
        }
    }

    // fabric
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
	it.options.release = 17
}